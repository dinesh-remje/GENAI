package com.bedrock.dinesh;

import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;
import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.bedrockagentruntime.BedrockAgentRuntimeClient;
import software.amazon.awssdk.services.bedrockagentruntime.model.Citation;
import software.amazon.awssdk.services.bedrockagentruntime.model.KnowledgeBaseRetrieveAndGenerateConfiguration;
import software.amazon.awssdk.services.bedrockagentruntime.model.RetrieveAndGenerateConfiguration;
import software.amazon.awssdk.services.bedrockagentruntime.model.RetrieveAndGenerateInput;
import software.amazon.awssdk.services.bedrockagentruntime.model.RetrieveAndGenerateRequest;
import software.amazon.awssdk.services.bedrockagentruntime.model.RetrieveAndGenerateResponse;
import software.amazon.awssdk.services.bedrockagentruntime.model.RetrieveAndGenerateType;
import software.amazon.awssdk.services.bedrockagentruntime.model.RetrievedReference;

public class Bedrockknowledgebase {

	public static void main(String[] args) {
	    System.out.println("RAG - Invoke Knowledge Base and Model");

	    // Define AWS region
	    Region region = Region.US_EAST_1; // Replace with your desired region

	    // Create Bedrock Agent Runtime Client
	    BedrockAgentRuntimeClient bedrockClient = BedrockAgentRuntimeClient.builder()
	            .region(region)
	            .credentialsProvider(DefaultCredentialsProvider.create())
	            .build();

	    // Configure Knowledge Base and Model
	    KnowledgeBaseRetrieveAndGenerateConfiguration kbConfig = KnowledgeBaseRetrieveAndGenerateConfiguration.builder()
	            .knowledgeBaseId("ACTUAL KNOWLEDGEBASE ID") // Replace with actual Knowledge Base ID
	            .modelArn("ACTUAL MODEL ID") // Replace with actual Model ARN, I prefer using claude haiku model
	            .build();

	    // Create Retrieve and Generate Configuration
	    RetrieveAndGenerateConfiguration config = RetrieveAndGenerateConfiguration.builder()
	            .knowledgeBaseConfiguration(kbConfig)
	            .type(RetrieveAndGenerateType.KNOWLEDGE_BASE)
	            .build();

	    // Define query input
	    String query = "what is sum assured for Dinesh Remje";

	    // Build Retrieve and Generate Input
	    RetrieveAndGenerateInput input = RetrieveAndGenerateInput.builder().text(query).build();

	    // Create Retrieve and Generate Request
	    RetrieveAndGenerateRequest request = RetrieveAndGenerateRequest.builder()
	            .input(input)
	            .retrieveAndGenerateConfiguration(config)
	            .build();

	    // Send request and retrieve response
	    RetrieveAndGenerateResponse response = bedrockClient.retrieveAndGenerate(request);

	    // Print response details
	    System.out.println("RAG - Response: " + response.toString());
	    System.out.println("RAG - Output: " + response.output().text());

	    // Process citations if available.
	    // Citations refer to references that provide supporting evidence for the response generated by the knowledge base.
	    // As of now I don't need this and hence code is commented out.
	    /*for (Citation c : response.citations()) {
	        System.out.println("RAG - Retrieval References: " + (c.hasRetrievedReferences() ? c.retrievedReferences().size() : 0));

	        // Iterate through retrieved references
	        for (RetrievedReference r : c.retrievedReferences()) {
	            System.out.println("RAG - Content: " + r.content().text());
	            System.out.println("RAG - Location: " + r.location().s3Location().uri());
	        }
	    }*/

	    // Print final response output
	    System.out.println("Response: " + response.output().text());
	}
}
